---
import "@fontsource/twinkle-star";
import Canvas from "../components/Canvas";
import { authEndpoint, clientId, clientSecret } from "../constants";
import Layout from "../layouts/Layout.astro";
const authString = `${clientId}:${clientSecret}`;
let authorization;
if (typeof btoa !== "undefined") {
  authorization = btoa(authString);
} else if (Buffer) {
  authorization = Buffer.from(authString).toString("base64");
} else {
  throw new Error("No suitable environment found");
}
let error = null;
const authToken = await fetch(authEndpoint, {
  method: "post",
  body: "grant_type=client_credentials",
  headers: {
    "Content-Type": "application/x-www-form-urlencoded",
    Authorization: `Basic ${authorization}`,
  },
})
  .then((res) => res.json())
  .then((json) => json.access_token)
  .catch((err) => {
    error = err;
  });

---

<Layout title="Chandler hugs your album.">
  <main>
    <h1 class="text-lg">Chandler hugs your album.</h1>

    <dir class="art">
      <Canvas authToken={authToken} client:load />
    </dir>

  </main>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 20px;
    line-height: 1.6;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .primary-search {
    all: unset;
    padding: 10px 20px;
    margin: 10px 5px;
    background-color: rgb(82, 171, 209);
    height: 20px;
    color: rgb(0, 0, 0);
  }
  .primary-button {
    all: unset;
    padding: 10px 20px;
    margin: 10px 5px;
    font-family: "Twinkle Star", cursive;
    cursor: pointer;
    font-weight: bolder;
    background-color: rgb(255, 0, 247);
  }
  .primary-button:hover {
    transform: scale(1.05);
  }
  ..primary-button:focus {
    transform: scale(1.05);
  }
  .astro-a {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(
      rgba(var(--accent-dark), 66%),
      rgba(var(--accent-dark), 33%)
    );
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions code {
    font-size: 0.8em;
    font-weight: bold;
    background: rgba(var(--accent-light), 12%);
    color: rgb(var(--accent-light));
    border-radius: 4px;
    padding: 0.3em 0.4em;
  }
  .instructions strong {
    color: rgb(var(--accent-light));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 2rem;
    padding: 0;
  }
</style>
